{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Starlette-Admin is a fast, beautiful and extensible administrative interface framework for Starlette/FastApi applications. Getting started Check out the documentation . Try the live demo . ( Source code ) Try the several usage examples included in the /examples folder Features CRUD any data with ease Automatic form validation Advanced table widget with Datatables Search and filtering Search highlighting Multi-column ordering Export data to CSV/EXCEL/PDF and Browser Print Authentication Authorization Manage Files Custom views Supported ORMs SQLAlchemy SQLModel MongoEngine ODMantic Custom backend ( doc , example ) Installation PIP $ pip install starlette-admin Poetry $ poetry add starlette-admin Example This is a simple example with SQLAlchemy model from sqlalchemy import Column , Integer , String , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) # Define your model class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) Base . metadata . create_all ( engine ) app = Starlette () # FastAPI() # Create admin admin = Admin ( engine , title = \"Example: SQLAlchemy\" ) # Add view admin . add_view ( ModelView ( Post )) # Mount admin to your app admin . mount_to ( app ) Access your admin interface in your browser at http://localhost:8000/admin Third party starlette-admin is built with other open source projects: Tabler Datatables jquery Select2 flatpickr moment jsoneditor fontawesome","title":"Overview"},{"location":"#overview","text":"Starlette-Admin is a fast, beautiful and extensible administrative interface framework for Starlette/FastApi applications.","title":"Overview"},{"location":"#getting-started","text":"Check out the documentation . Try the live demo . ( Source code ) Try the several usage examples included in the /examples folder","title":"Getting started"},{"location":"#features","text":"CRUD any data with ease Automatic form validation Advanced table widget with Datatables Search and filtering Search highlighting Multi-column ordering Export data to CSV/EXCEL/PDF and Browser Print Authentication Authorization Manage Files Custom views Supported ORMs SQLAlchemy SQLModel MongoEngine ODMantic Custom backend ( doc , example )","title":"Features"},{"location":"#installation","text":"","title":"Installation"},{"location":"#pip","text":"$ pip install starlette-admin","title":"PIP"},{"location":"#poetry","text":"$ poetry add starlette-admin","title":"Poetry"},{"location":"#example","text":"This is a simple example with SQLAlchemy model from sqlalchemy import Column , Integer , String , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) # Define your model class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) Base . metadata . create_all ( engine ) app = Starlette () # FastAPI() # Create admin admin = Admin ( engine , title = \"Example: SQLAlchemy\" ) # Add view admin . add_view ( ModelView ( Post )) # Mount admin to your app admin . mount_to ( app ) Access your admin interface in your browser at http://localhost:8000/admin","title":"Example"},{"location":"#third-party","text":"starlette-admin is built with other open source projects: Tabler Datatables jquery Select2 flatpickr moment jsoneditor fontawesome","title":"Third party"},{"location":"alternatives/","text":"Alternatives, Inspiration and Comparisons Flask-Admin: Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi. FastApi-Admin: A fast admin dashboard based on FastAPI and TortoiseORM. sqladmin: SQLAlchemy Admin for FastAPI and Starlette","title":"Alternatives, Inspiration and Comparisons"},{"location":"alternatives/#alternatives-inspiration-and-comparisons","text":"Flask-Admin: Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi. FastApi-Admin: A fast admin dashboard based on FastAPI and TortoiseORM. sqladmin: SQLAlchemy Admin for FastAPI and Starlette","title":"Alternatives, Inspiration and Comparisons"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.3.0] - 2022-11-21 Breaking Changes Changes in ModelView definition Now Before class Post : id : int title : str admin . add_view ( ModelView ( Post , icon = \"fa fa-blog\" , label = \"Blog Posts\" )) class Post : id : int title : str class PostView ( ModelView , model = Post ): icon = \"fa fa-blog\" label = \"Blog Posts\" admin . add_view ( PostView ) Changes in CustomView definition Now Before admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) class HomeView ( CustomView ): label = \"Home\" icon = \"fa fa-home\" path = \"/home\" template_path = \"home.html\" admin . add_view ( HomeView ) Changes in Link definition Now Before admin . add_view ( Link ( label = \"Back to Home\" , icon = \"fa fa-home\" , url = \"/\" , target = \"_blank\" )) class BackToHome ( Link ): label = \"Back to Home\" icon = \"fa fa-home\" url = \"/\" target = \"_blank\" These changes are inspired from Flask-admin and are introduced to help reduce code size and keep it simple. Added Add CollectionField Add ListField Add support for Odmantic Add support for datatables responsive extensions Usage class MyModelView ( ModelView ): responsive_table = True Changed Move SQLModel to it own contrib package MongoEngine EmbeddedDocumentField is now converted into CollectionField Removed Remove PDF from default export_types [0.2.2] - 2022-09-20 Fixed Null support for EnumField in #17 [0.2.1] - 2022-09-19 Fixed Fix SearchBuilder not working with dates (SQLAlchemy) in #15 [0.2.0] - 2022-09-14 Changed Date & Time input now use Flatpickr in #10 [0.1.1] - 2022-09-09 Added Add ColorField in #7 AsyncEngine support for SQLAlchemy in #8","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#030-2022-11-21","text":"","title":"[0.3.0] - 2022-11-21"},{"location":"changelog/#breaking-changes","text":"Changes in ModelView definition Now Before class Post : id : int title : str admin . add_view ( ModelView ( Post , icon = \"fa fa-blog\" , label = \"Blog Posts\" )) class Post : id : int title : str class PostView ( ModelView , model = Post ): icon = \"fa fa-blog\" label = \"Blog Posts\" admin . add_view ( PostView ) Changes in CustomView definition Now Before admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) class HomeView ( CustomView ): label = \"Home\" icon = \"fa fa-home\" path = \"/home\" template_path = \"home.html\" admin . add_view ( HomeView ) Changes in Link definition Now Before admin . add_view ( Link ( label = \"Back to Home\" , icon = \"fa fa-home\" , url = \"/\" , target = \"_blank\" )) class BackToHome ( Link ): label = \"Back to Home\" icon = \"fa fa-home\" url = \"/\" target = \"_blank\" These changes are inspired from Flask-admin and are introduced to help reduce code size and keep it simple.","title":"Breaking Changes"},{"location":"changelog/#added","text":"Add CollectionField Add ListField Add support for Odmantic Add support for datatables responsive extensions Usage class MyModelView ( ModelView ): responsive_table = True","title":"Added"},{"location":"changelog/#changed","text":"Move SQLModel to it own contrib package MongoEngine EmbeddedDocumentField is now converted into CollectionField","title":"Changed"},{"location":"changelog/#removed","text":"Remove PDF from default export_types","title":"Removed"},{"location":"changelog/#022-2022-09-20","text":"","title":"[0.2.2] - 2022-09-20"},{"location":"changelog/#fixed","text":"Null support for EnumField in #17","title":"Fixed"},{"location":"changelog/#021-2022-09-19","text":"","title":"[0.2.1] - 2022-09-19"},{"location":"changelog/#fixed_1","text":"Fix SearchBuilder not working with dates (SQLAlchemy) in #15","title":"Fixed"},{"location":"changelog/#020-2022-09-14","text":"","title":"[0.2.0] - 2022-09-14"},{"location":"changelog/#changed_1","text":"Date & Time input now use Flatpickr in #10","title":"Changed"},{"location":"changelog/#011-2022-09-09","text":"","title":"[0.1.1] - 2022-09-09"},{"location":"changelog/#added_1","text":"Add ColorField in #7 AsyncEngine support for SQLAlchemy in #8","title":"Added"},{"location":"advanced/base-model-view/","text":"Extending BaseModelView Starlette-Admin makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin \u2019s model views work as expected, then you should take note of the following: Each model must have one field which acts as a primary key to uniquely identify instances of that model. However, there are no restriction on the data type or the field name of the primary key field. Models must make their data accessible as python properties. If that is the case, then you can implement your own database backend by extending the BaseModelView class, and implementing the set of methods listed below. Let's say you've defined your models like this: from dataclasses import dataclass from typing import List @dataclass class Post : id : int title : str content : str tags : List [ str ] First you need to define a new class, which derives from BaseModelView . from starlette_admin import BaseModelView class PostView ( BaseModelView ): pass Now, implement the following methods or attributes for the new class: Metadata Set the identity , name and label for the new class from starlette_admin import BaseModelView class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" Important identity is used to identify the model associated to this view and should be unique. Primary key Set the pk_attr value which is primary key attribute name from starlette_admin import BaseModelView class PostView ( BaseModelView ): pk_attr = \"id\" Fields Internally, Starlette-Admin uses custom fields all inherit from BaseField to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See API Reference for full list of default fields. from starlette_admin import BaseModelView from starlette_admin import IntegerField , StringField , TagsField , TextAreaField class PostView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ] CRUD methods Finally, you need to implement these CRUD methods: count() find_all() create() edit() delete() Full example from dataclasses import dataclass from typing import Any , Dict , Iterable , List , Optional , Union from starlette.requests import Request from starlette_admin import IntegerField , StringField , TagsField , TextAreaField from starlette_admin.exceptions import FormValidationError from starlette_admin.views import BaseModelView @dataclass class Post : id : int title : str content : str tags : List [ str ] def is_valid_for_term ( self , term ): return ( str ( term ) . lower () in self . title . lower () or str ( term ) . lower () in self . content . lower () or any ([ str ( term ) . lower () in tag . lower () for tag in self . tags ]) ) def update ( self , data : Dict ): for key , value in data . items (): if hasattr ( self , key ): setattr ( self , key , value ) db : Dict [ int , Post ] = dict () next_id = 1 def filter_values ( values : Iterable [ Post ], term ): filtered_values = [] for value in values : if value . is_valid_for_term ( term ): filtered_values . append ( value ) return filtered_values class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" pk_attr = \"id\" fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ] sortable_fields = ( \"id\" , \"title\" , \"content\" ) search_builder = False async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : values = list ( db . values ()) if where is not None : values = filter_values ( values , where ) return len ( values ) async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> List [ Any ]: values = list ( db . values ()) if order_by is not None : assert len ( order_by ) < 2 , \"Not supported\" if len ( order_by ) == 1 : key , dir = order_by [ 0 ] . split ( maxsplit = 1 ) values . sort ( key = lambda v : getattr ( v , key ), reverse = ( dir == \"desc\" )) if where is not None and isinstance ( where , ( str , int )): values = filter_values ( values , where ) if limit > 0 : return values [ skip : skip + limit ] return values [ skip :] async def find_by_pk ( self , request : Request , pk ): return db . get ( int ( pk ), None ) async def find_by_pks ( self , request : Request , pks ): return [ db . get ( int ( pk )) for pk in pks ] async def validate_data ( self , data : Dict ): errors = {} if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure title has at least 03 characters\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"You need at least one tag\" if len ( errors ) > 0 : raise FormValidationError ( errors ) async def create ( self , request : Request , data : Dict ): await self . validate_data ( data ) global next_id obj = Post ( id = next_id , ** data ) db [ next_id ] = obj next_id += 1 return obj async def edit ( self , request : Request , pk , data : Dict ): await self . validate_data ( data ) db [ int ( pk )] . update ( data ) return db [ int ( pk )] async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: cnt = 0 for pk in pks : value = await self . find_by_pk ( request , pk ) if value is not None : del db [ int ( pk )] cnt += 1 return cnt","title":"Extending BaseModelView"},{"location":"advanced/base-model-view/#extending-basemodelview","text":"Starlette-Admin makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin \u2019s model views work as expected, then you should take note of the following: Each model must have one field which acts as a primary key to uniquely identify instances of that model. However, there are no restriction on the data type or the field name of the primary key field. Models must make their data accessible as python properties. If that is the case, then you can implement your own database backend by extending the BaseModelView class, and implementing the set of methods listed below. Let's say you've defined your models like this: from dataclasses import dataclass from typing import List @dataclass class Post : id : int title : str content : str tags : List [ str ] First you need to define a new class, which derives from BaseModelView . from starlette_admin import BaseModelView class PostView ( BaseModelView ): pass Now, implement the following methods or attributes for the new class:","title":"Extending BaseModelView"},{"location":"advanced/base-model-view/#metadata","text":"Set the identity , name and label for the new class from starlette_admin import BaseModelView class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" Important identity is used to identify the model associated to this view and should be unique.","title":"Metadata"},{"location":"advanced/base-model-view/#primary-key","text":"Set the pk_attr value which is primary key attribute name from starlette_admin import BaseModelView class PostView ( BaseModelView ): pk_attr = \"id\"","title":"Primary key"},{"location":"advanced/base-model-view/#fields","text":"Internally, Starlette-Admin uses custom fields all inherit from BaseField to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See API Reference for full list of default fields. from starlette_admin import BaseModelView from starlette_admin import IntegerField , StringField , TagsField , TextAreaField class PostView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ]","title":"Fields"},{"location":"advanced/base-model-view/#crud-methods","text":"Finally, you need to implement these CRUD methods: count() find_all() create() edit() delete()","title":"CRUD methods"},{"location":"advanced/base-model-view/#full-example","text":"from dataclasses import dataclass from typing import Any , Dict , Iterable , List , Optional , Union from starlette.requests import Request from starlette_admin import IntegerField , StringField , TagsField , TextAreaField from starlette_admin.exceptions import FormValidationError from starlette_admin.views import BaseModelView @dataclass class Post : id : int title : str content : str tags : List [ str ] def is_valid_for_term ( self , term ): return ( str ( term ) . lower () in self . title . lower () or str ( term ) . lower () in self . content . lower () or any ([ str ( term ) . lower () in tag . lower () for tag in self . tags ]) ) def update ( self , data : Dict ): for key , value in data . items (): if hasattr ( self , key ): setattr ( self , key , value ) db : Dict [ int , Post ] = dict () next_id = 1 def filter_values ( values : Iterable [ Post ], term ): filtered_values = [] for value in values : if value . is_valid_for_term ( term ): filtered_values . append ( value ) return filtered_values class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" pk_attr = \"id\" fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ] sortable_fields = ( \"id\" , \"title\" , \"content\" ) search_builder = False async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : values = list ( db . values ()) if where is not None : values = filter_values ( values , where ) return len ( values ) async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> List [ Any ]: values = list ( db . values ()) if order_by is not None : assert len ( order_by ) < 2 , \"Not supported\" if len ( order_by ) == 1 : key , dir = order_by [ 0 ] . split ( maxsplit = 1 ) values . sort ( key = lambda v : getattr ( v , key ), reverse = ( dir == \"desc\" )) if where is not None and isinstance ( where , ( str , int )): values = filter_values ( values , where ) if limit > 0 : return values [ skip : skip + limit ] return values [ skip :] async def find_by_pk ( self , request : Request , pk ): return db . get ( int ( pk ), None ) async def find_by_pks ( self , request : Request , pks ): return [ db . get ( int ( pk )) for pk in pks ] async def validate_data ( self , data : Dict ): errors = {} if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure title has at least 03 characters\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"You need at least one tag\" if len ( errors ) > 0 : raise FormValidationError ( errors ) async def create ( self , request : Request , data : Dict ): await self . validate_data ( data ) global next_id obj = Post ( id = next_id , ** data ) db [ next_id ] = obj next_id += 1 return obj async def edit ( self , request : Request , pk , data : Dict ): await self . validate_data ( data ) db [ int ( pk )] . update ( data ) return db [ int ( pk )] async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: cnt = 0 for pk in pks : value = await self . find_by_pk ( request , pk ) if value is not None : del db [ int ( pk )] cnt += 1 return cnt","title":"Full example"},{"location":"advanced/custom-field/","text":"Custom Field Starlette-Admin has a lot of built-in fields available. But you can override or create your own field according to your need. Important Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases. The first step is to define a new class, which derives from BaseField or any others fields to customize it from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): pass List Rendering Starlette-Admin use Datatables to render list. By default all fields will be render as text field. To customize this behavior you need to write a javascript function to render your column inside datatable instance. For more information on how to write your function read Datatables documentation . First, you need to provide a link to your custom javascript file in which you add additional render function, by overriding the admin class Example This is simple example with SQLAlchemy backend from starlette_admin.contrib.sqla import Admin as BaseAdmin class Admin ( BaseAdmin ): def custom_render_js ( self , request : Request ) -> Optional [ str ]: return request . url_for ( \"statics\" , path = \"js/custom_render.js\" ) admin = Admin ( engine ) admin . add_view ( ... ) statics/js/custom_render.js Object . assign ( render , { mycustomkey : function render ( data , type , full , meta , fieldOptions ) { ... }, }); Note fieldOptions is your field as javascript object. Your field attributes is serialized into javascript object by using dataclass asdict function. Then, set render_function_key value from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" Form For form rendering, you should create a new html file under the directory forms in your templates dir. These jinja2 variables are available: field : Your field instance error : Error message coming from FormValidationError data : current value. Will be available if it is edit or when validation error occur action : EDIT or CREATE Example forms/custom.html < div class = \"{%if error%}is-invalid{%endif%}\" > < input id = \"{{field.id}}\" name = \"{{field.id}}\" ... /> {% if field.help_text %} < small class = \"form-hint\" > {{field.help_text}} </ small > {%endif%} </ div > {%if error %} < div class = \"invalid-feedback\" > {{error}} </ div > {%endif%} from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" Detail Page To render your field on detail page, you should create a new html file under the directory displays in your template dir. These jinja2 variables are available: field : Your field instance data : value to display Example displays/custom.html < span > Hello {{data}} </ span > from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\" Data processing For data processing you will need to override two functions: process_form_data : Will be call when converting field value into python dict object serialize_field_value : Will be call when serializing value to send through the API. This is the same data you will get in your render function from dataclasses import dataclass from typing import Any , Dict from requests import Request from starlette.datastructures import FormData from starlette_admin import BaseField @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\" async def parse_form_data ( self , request : Request , form_data : FormData ) -> Any : return form_data . get ( self . name ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return value def dict ( self ) -> Dict [ str , Any ]: return super () . dict () Important Override dict function to get control of the options which is available in javascript.","title":"Custom Field"},{"location":"advanced/custom-field/#custom-field","text":"Starlette-Admin has a lot of built-in fields available. But you can override or create your own field according to your need. Important Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases. The first step is to define a new class, which derives from BaseField or any others fields to customize it from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): pass","title":"Custom Field"},{"location":"advanced/custom-field/#list-rendering","text":"Starlette-Admin use Datatables to render list. By default all fields will be render as text field. To customize this behavior you need to write a javascript function to render your column inside datatable instance. For more information on how to write your function read Datatables documentation . First, you need to provide a link to your custom javascript file in which you add additional render function, by overriding the admin class Example This is simple example with SQLAlchemy backend from starlette_admin.contrib.sqla import Admin as BaseAdmin class Admin ( BaseAdmin ): def custom_render_js ( self , request : Request ) -> Optional [ str ]: return request . url_for ( \"statics\" , path = \"js/custom_render.js\" ) admin = Admin ( engine ) admin . add_view ( ... ) statics/js/custom_render.js Object . assign ( render , { mycustomkey : function render ( data , type , full , meta , fieldOptions ) { ... }, }); Note fieldOptions is your field as javascript object. Your field attributes is serialized into javascript object by using dataclass asdict function. Then, set render_function_key value from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\"","title":"List Rendering"},{"location":"advanced/custom-field/#form","text":"For form rendering, you should create a new html file under the directory forms in your templates dir. These jinja2 variables are available: field : Your field instance error : Error message coming from FormValidationError data : current value. Will be available if it is edit or when validation error occur action : EDIT or CREATE Example forms/custom.html < div class = \"{%if error%}is-invalid{%endif%}\" > < input id = \"{{field.id}}\" name = \"{{field.id}}\" ... /> {% if field.help_text %} < small class = \"form-hint\" > {{field.help_text}} </ small > {%endif%} </ div > {%if error %} < div class = \"invalid-feedback\" > {{error}} </ div > {%endif%} from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\"","title":"Form"},{"location":"advanced/custom-field/#detail-page","text":"To render your field on detail page, you should create a new html file under the directory displays in your template dir. These jinja2 variables are available: field : Your field instance data : value to display Example displays/custom.html < span > Hello {{data}} </ span > from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\"","title":"Detail Page"},{"location":"advanced/custom-field/#data-processing","text":"For data processing you will need to override two functions: process_form_data : Will be call when converting field value into python dict object serialize_field_value : Will be call when serializing value to send through the API. This is the same data you will get in your render function from dataclasses import dataclass from typing import Any , Dict from requests import Request from starlette.datastructures import FormData from starlette_admin import BaseField @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\" async def parse_form_data ( self , request : Request , form_data : FormData ) -> Any : return form_data . get ( self . name ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return value def dict ( self ) -> Dict [ str , Any ]: return super () . dict () Important Override dict function to get control of the options which is available in javascript.","title":"Data processing"},{"location":"api/auth-provider/","text":"starlette_admin.auth.AuthProvider Base class for implementing the Authentication into your admin interface. You need to inherit this class and override the methods: login , logout and is_authenticated . is_authenticated ( request ) async Implement authentication logic here. This method will be called for each incoming request to validate the session. login ( username , password , remember_me , request , response ) async Implement login logic here and return the response back logout ( request , response ) async Implement logout logic here and return the response back","title":"AuthProvider"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider","text":"Base class for implementing the Authentication into your admin interface. You need to inherit this class and override the methods: login , logout and is_authenticated .","title":"AuthProvider"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.is_authenticated","text":"Implement authentication logic here. This method will be called for each incoming request to validate the session.","title":"is_authenticated()"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.login","text":"Implement login logic here and return the response back","title":"login()"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.logout","text":"Implement logout logic here and return the response back","title":"logout()"},{"location":"api/base-admin/","text":"starlette_admin.base.BaseAdmin Base class for implementing Admin interface. __init__ ( title = 'Admin' , base_url = '/admin' , route_name = 'admin' , logo_url = None , login_logo_url = None , templates_dir = 'templates' , statics_dir = None , index_view = None , auth_provider = None , middlewares = None , debug = False ) Parameters: Name Type Description Default title str Admin title. 'Admin' base_url str Base URL for Admin interface. '/admin' route_name str Mounted Admin name 'admin' logo_url Optional [ str ] URL of logo to be displayed instead of title. None login_logo_url Optional [ str ] If set, it will be used for login interface instead of logo_url. None templates_dir str Templates dir for customisation 'templates' statics_dir Optional [ str ] Statics dir for customisation None index_view Optional [ CustomView ] CustomView to use for index page. None auth_provider Optional [ AuthProvider ] Authentication Provider None middlewares Optional [ Sequence [ Middleware ]] Starlette middlewares None add_view ( view ) Add View to the Admin interface. custom_render_js ( request ) Override this function to provide a link to custom js to override the global render object in javascript which is use to render fields in list page. Parameters: Name Type Description Default request Request Starlette Request required","title":"BaseAdmin"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin","text":"Base class for implementing Admin interface.","title":"BaseAdmin"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.__init__","text":"Parameters: Name Type Description Default title str Admin title. 'Admin' base_url str Base URL for Admin interface. '/admin' route_name str Mounted Admin name 'admin' logo_url Optional [ str ] URL of logo to be displayed instead of title. None login_logo_url Optional [ str ] If set, it will be used for login interface instead of logo_url. None templates_dir str Templates dir for customisation 'templates' statics_dir Optional [ str ] Statics dir for customisation None index_view Optional [ CustomView ] CustomView to use for index page. None auth_provider Optional [ AuthProvider ] Authentication Provider None middlewares Optional [ Sequence [ Middleware ]] Starlette middlewares None","title":"__init__()"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.add_view","text":"Add View to the Admin interface.","title":"add_view()"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.custom_render_js","text":"Override this function to provide a link to custom js to override the global render object in javascript which is use to render fields in list page. Parameters: Name Type Description Default request Request Starlette Request required","title":"custom_render_js()"},{"location":"api/fields/","text":"starlette_admin.fields.BaseField dataclass Base class for fields Parameters: Name Type Description Default name str Field name, same as attribute name in your model required label Optional [ str ] Field label None help_text Optional [ str ] Hint message to display in forms None type Optional [ str ] Field type, unique key used to define the field None id str Unique id, used to represent field instance '' search_builder_type Optional [ str ] datatable columns.searchBuilderType, For more information click here 'default' required Optional [ bool ] Indicate if the fields is required False exclude_from_list Optional [ bool ] Control field visibility in list page False exclude_from_detail Optional [ bool ] Control field visibility in detail page False exclude_from_create Optional [ bool ] Control field visibility in create page False exclude_from_edit Optional [ bool ] Control field visibility in edit page False searchable Optional [ bool ] Indicate if the fields is searchable True orderable Optional [ bool ] Indicate if the fields is orderable True render_function_key str Render function key inside the global render variable in javascript 'text' form_template str template for rendering this field in creation and edit page 'forms/input.html' display_template str template for displaying this field in detail page 'displays/text.html' starlette_admin.fields.BooleanField dataclass Bases: BaseField This field displays the true/false value of a boolean property. starlette_admin.fields.IntegerField dataclass Bases: NumberField This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value. starlette_admin.fields.DecimalField dataclass Bases: NumberField This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value. starlette_admin.fields.FloatField dataclass Bases: StringField A text field, except all input is coerced to an float. Erroneous input is ignored and will not be accepted as a value. starlette_admin.fields.StringField dataclass Bases: BaseField This field is used to represent any kind of short text content. starlette_admin.fields.TextAreaField dataclass Bases: StringField This field is used to represent any kind of long text content. For short text contents, use StringField starlette_admin.fields.TagsField dataclass Bases: BaseField This field is used to represent the value of properties that store a list of string values. Render as select2 tags input. starlette_admin.fields.EmailField dataclass Bases: StringField This field is used to represent a text content that stores a single email address. starlette_admin.fields.URLField dataclass Bases: StringField This field is used to represent a text content that stores a single URL. starlette_admin.fields.PhoneField dataclass Bases: StringField A StringField, except renders an <input type=\"phone\"> . starlette_admin.fields.ColorField dataclass Bases: StringField A StringField, except renders an <input type=\"color\"> . starlette_admin.fields.PasswordField dataclass Bases: StringField A StringField, except renders an <input type=\"password\"> . starlette_admin.fields.EnumField dataclass Bases: StringField Enumeration Field. It take a python enum.Enum class or a list of (value, label) pairs. It can also be a list of only values, in which case the value is used as the label. Example class Status ( str , enum . Enum ): NEW = \"new\" ONGOING = \"ongoing\" DONE = \"done\" class MyModel : status : Optional [ Status ] = None class MyModelView ( ModelView ): fields = [ EnumField . from_enum ( \"status\" , Status )] class MyModel : language : str class MyModelView ( ModelView ): fields = [ EnumField . from_choices ( \"language\" , [( 'cpp' , 'C++' ), ( 'py' , 'Python' ), ( 'text' , 'Plain Text' )])] starlette_admin.fields.DateTimeField dataclass Bases: NumberField This field is used to represent a value that stores a python datetime.datetime object Parameters: Name Type Description Default search_format Optional [ str ] moment.js format to send for searching. Use None for iso Format None output_format str display output format '%B %d, %Y %H:%M:%S' starlette_admin.fields.DateField dataclass Bases: DateTimeField This field is used to represent a value that stores a python datetime.date object Parameters: Name Type Description Default search_format str moment.js format to send for searching. Use None for iso Format 'YYYY-MM-DD' output_format str Set display output format '%B %d, %Y' starlette_admin.fields.TimeField dataclass Bases: DateTimeField This field is used to represent a value that stores a python datetime.time object Parameters: Name Type Description Default search_format str Format to send for search. Use None for iso Format 'HH:mm:ss' output_format str Set display output format '%H:%M:%S' starlette_admin.fields.JSONField dataclass Bases: BaseField This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value. starlette_admin.fields.FileField dataclass Bases: BaseField Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is filename , content-type and url . Use multiple=True for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True. starlette_admin.fields.ImageField dataclass Bases: FileField FileField with accept=\"image/*\" . starlette_admin.fields.HasOne dataclass Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required starlette_admin.fields.HasMany dataclass Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required starlette_admin.fields.ListField dataclass Bases: BaseField Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list. Usage class MyModel : id : Optional [ int ] values : List [ str ] class ModelView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), ListField ( StringField ( \"values\" )] starlette_admin.fields.CollectionField dataclass Bases: BaseField This field represents a collection of others fields. Can be used to represent embedded mongodb document. Usage CollectionField ( \"config\" , fields = [ StringField ( \"key\" ), IntegerField ( \"value\" , help_text = \"multiple of 5\" )]),","title":"Fields"},{"location":"api/fields/#starlette_admin.fields.BaseField","text":"Base class for fields Parameters: Name Type Description Default name str Field name, same as attribute name in your model required label Optional [ str ] Field label None help_text Optional [ str ] Hint message to display in forms None type Optional [ str ] Field type, unique key used to define the field None id str Unique id, used to represent field instance '' search_builder_type Optional [ str ] datatable columns.searchBuilderType, For more information click here 'default' required Optional [ bool ] Indicate if the fields is required False exclude_from_list Optional [ bool ] Control field visibility in list page False exclude_from_detail Optional [ bool ] Control field visibility in detail page False exclude_from_create Optional [ bool ] Control field visibility in create page False exclude_from_edit Optional [ bool ] Control field visibility in edit page False searchable Optional [ bool ] Indicate if the fields is searchable True orderable Optional [ bool ] Indicate if the fields is orderable True render_function_key str Render function key inside the global render variable in javascript 'text' form_template str template for rendering this field in creation and edit page 'forms/input.html' display_template str template for displaying this field in detail page 'displays/text.html'","title":"BaseField"},{"location":"api/fields/#starlette_admin.fields.BooleanField","text":"Bases: BaseField This field displays the true/false value of a boolean property.","title":"BooleanField"},{"location":"api/fields/#starlette_admin.fields.IntegerField","text":"Bases: NumberField This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value.","title":"IntegerField"},{"location":"api/fields/#starlette_admin.fields.DecimalField","text":"Bases: NumberField This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value.","title":"DecimalField"},{"location":"api/fields/#starlette_admin.fields.FloatField","text":"Bases: StringField A text field, except all input is coerced to an float. Erroneous input is ignored and will not be accepted as a value.","title":"FloatField"},{"location":"api/fields/#starlette_admin.fields.StringField","text":"Bases: BaseField This field is used to represent any kind of short text content.","title":"StringField"},{"location":"api/fields/#starlette_admin.fields.TextAreaField","text":"Bases: StringField This field is used to represent any kind of long text content. For short text contents, use StringField","title":"TextAreaField"},{"location":"api/fields/#starlette_admin.fields.TagsField","text":"Bases: BaseField This field is used to represent the value of properties that store a list of string values. Render as select2 tags input.","title":"TagsField"},{"location":"api/fields/#starlette_admin.fields.EmailField","text":"Bases: StringField This field is used to represent a text content that stores a single email address.","title":"EmailField"},{"location":"api/fields/#starlette_admin.fields.URLField","text":"Bases: StringField This field is used to represent a text content that stores a single URL.","title":"URLField"},{"location":"api/fields/#starlette_admin.fields.PhoneField","text":"Bases: StringField A StringField, except renders an <input type=\"phone\"> .","title":"PhoneField"},{"location":"api/fields/#starlette_admin.fields.ColorField","text":"Bases: StringField A StringField, except renders an <input type=\"color\"> .","title":"ColorField"},{"location":"api/fields/#starlette_admin.fields.PasswordField","text":"Bases: StringField A StringField, except renders an <input type=\"password\"> .","title":"PasswordField"},{"location":"api/fields/#starlette_admin.fields.EnumField","text":"Bases: StringField Enumeration Field. It take a python enum.Enum class or a list of (value, label) pairs. It can also be a list of only values, in which case the value is used as the label. Example class Status ( str , enum . Enum ): NEW = \"new\" ONGOING = \"ongoing\" DONE = \"done\" class MyModel : status : Optional [ Status ] = None class MyModelView ( ModelView ): fields = [ EnumField . from_enum ( \"status\" , Status )] class MyModel : language : str class MyModelView ( ModelView ): fields = [ EnumField . from_choices ( \"language\" , [( 'cpp' , 'C++' ), ( 'py' , 'Python' ), ( 'text' , 'Plain Text' )])]","title":"EnumField"},{"location":"api/fields/#starlette_admin.fields.DateTimeField","text":"Bases: NumberField This field is used to represent a value that stores a python datetime.datetime object Parameters: Name Type Description Default search_format Optional [ str ] moment.js format to send for searching. Use None for iso Format None output_format str display output format '%B %d, %Y %H:%M:%S'","title":"DateTimeField"},{"location":"api/fields/#starlette_admin.fields.DateField","text":"Bases: DateTimeField This field is used to represent a value that stores a python datetime.date object Parameters: Name Type Description Default search_format str moment.js format to send for searching. Use None for iso Format 'YYYY-MM-DD' output_format str Set display output format '%B %d, %Y'","title":"DateField"},{"location":"api/fields/#starlette_admin.fields.TimeField","text":"Bases: DateTimeField This field is used to represent a value that stores a python datetime.time object Parameters: Name Type Description Default search_format str Format to send for search. Use None for iso Format 'HH:mm:ss' output_format str Set display output format '%H:%M:%S'","title":"TimeField"},{"location":"api/fields/#starlette_admin.fields.JSONField","text":"Bases: BaseField This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value.","title":"JSONField"},{"location":"api/fields/#starlette_admin.fields.FileField","text":"Bases: BaseField Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is filename , content-type and url . Use multiple=True for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True.","title":"FileField"},{"location":"api/fields/#starlette_admin.fields.ImageField","text":"Bases: FileField FileField with accept=\"image/*\" .","title":"ImageField"},{"location":"api/fields/#starlette_admin.fields.HasOne","text":"Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required","title":"HasOne"},{"location":"api/fields/#starlette_admin.fields.HasMany","text":"Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required","title":"HasMany"},{"location":"api/fields/#starlette_admin.fields.ListField","text":"Bases: BaseField Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list. Usage class MyModel : id : Optional [ int ] values : List [ str ] class ModelView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), ListField ( StringField ( \"values\" )]","title":"ListField"},{"location":"api/fields/#starlette_admin.fields.CollectionField","text":"Bases: BaseField This field represents a collection of others fields. Can be used to represent embedded mongodb document. Usage CollectionField ( \"config\" , fields = [ StringField ( \"key\" ), IntegerField ( \"value\" , help_text = \"multiple of 5\" )]),","title":"CollectionField"},{"location":"api/views/","text":"starlette_admin.views.BaseView Base class for all views Attributes: Name Type Description label str Label of the view to be displayed. icon Optional [ str ] Icon to be displayed for this model in the admin. Only FontAwesome names are supported. is_accessible ( request ) Override this method to add permission checks. Return True if current user can access this view is_active ( request ) Return true if the current view is active starlette_admin.views.DropDown Bases: BaseView Group views inside a dropdown Example admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) ) starlette_admin.views.Link Bases: BaseView Add arbitrary hyperlinks to the menu Example admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" )) starlette_admin.views.CustomView Bases: BaseView Add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. Attributes: Name Type Description path Route path template_path Path to template file methods HTTP methods name Route name add_to_menu Display to menu or not Example admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) render ( request , templates ) async Default methods to render view. Override this methods to add your custom logic. starlette_admin.views.BaseModelView Bases: BaseView Base administrative view. Derive from this class to implement your administrative interface piece. Attributes: Name Type Description identity Optional [ str ] Unique identity to identify the model associated to this view. Will be used for URL of the endpoints. name Optional [ str ] Name of the view to be displayed fields Sequence [ BaseField ] List of fields pk_attr Optional [ str ] Primary key field name form_include_pk bool Indicate if the primary key should be excluded from create and edit. Default to True exclude_fields_from_list Sequence [ str ] List of fields to exclude in List page. exclude_fields_from_detail Sequence [ str ] List of fields to exclude in Detail page. exclude_fields_from_create Sequence [ str ] List of fields to exclude from creation page. exclude_fields_from_edit Sequence [ str ] List of fields to exclude from editing page. searchable_fields Optional [ Sequence [ str ]] List of searchable fields. sortable_fields Optional [ Sequence [ str ]] List of sortable fields. export_fields Optional [ Sequence [ str ]] List of fields to include in exports. export_types Sequence [ ExportType ] A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . All of them are activated by default. column_visibility bool Control column visibility button search_builder bool Control search builder button page_size int Default number of items to display in List page pagination. Default value is set to 10 . page_size_options Sequence [ int ] Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All responsive Sequence [ int ] Activate responsive design https://datatables.net/extensions/responsive/ list_template str List view template. Default is list.html . detail_template str Details view template. Default is details.html . create_template str Edit view template. Default is edit.html . edit_template str Edit view template. Default is edit.html . can_create ( request ) Permission for creating new Items. Return True by default can_delete ( request ) Permission for deleting Items. Return True by default can_edit ( request ) Permission for editing Items. Return True by default can_view_details ( request ) Permission for viewing full details of Item. Return True by default count ( request , where = None ) abstractmethod async Count items Parameters: Name Type Description Default request Request Starlette Request required where Union [ Dict [ str , Any ], str , None] Can be dict for complex query { \"and\" :[{ \"id\" : { \"gt\" : 5 }},{ \"name\" : { \"startsWith\" : \"ban\" }}]} or plain text for full search None create ( request , data ) abstractmethod async Create item Parameters: Name Type Description Default request Request Starlette Request required data Dict Dict values contained converted form data required Returns: Name Type Description Any Any Created Item delete ( request , pks ) abstractmethod async Bulk delete items Parameters: Name Type Description Default request Request Starlette Request required pks List [ Any ] List of primary keys required edit ( request , pk , data ) abstractmethod async Edit item Parameters: Name Type Description Default request Request Starlette Request required pk Any Primary key required data Dict [ str , Any ] Dict values contained converted form data required Returns: Name Type Description Any Any Edited Item find_all ( request , skip = 0 , limit = 100 , where = None , order_by = None ) abstractmethod async Find all items Parameters: Name Type Description Default request Request Starlette Request required where Union [ Dict [ str , Any ], str , None] Can be dict for complex query { \"and\" :[{ \"id\" : { \"gt\" : 5 }},{ \"name\" : { \"startsWith\" : \"ban\" }}]} or plain text for full search None skip int should return values start from position skip+1 0 limit int number of maximum items to return 100 order_by Optional [ List [ str ]] order data clauses in form [\"id asc\", \"name desc\"] None find_by_pk ( request , pk ) abstractmethod async Find one item Parameters: Name Type Description Default request Request Starlette Request required pk Any Primary key required find_by_pks ( request , pks ) abstractmethod async Find many items Parameters: Name Type Description Default request Request Starlette Request required pks List [ Any ] List of Primary key required repr ( obj , request ) async Override this function to customize item representation in relationships columns select2_result ( obj , request ) async Override this function to customize the way that search results are rendered. Note The returned value should be html. You can use <span>mytext</span> when you want to return string value Danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with autoescape=True . For more information click here Parameters: Name Type Description Default obj Any item returned by find_all or find_by_pk required request Request Starlette Request required select2_selection ( obj , request ) async Override this function to customize the way that selections are rendered. Note The returned value should be html. You can use <span>mytext</span> when you want to return string value Danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with autoescape=True . For more information click here Parameters: Name Type Description Default obj Any item returned by find_all or find_by_pk required request Request Starlette Request required serialize_field_value ( value , field , action , request ) async Format output value for each field. Important The returned value should be json serializable Parameters: Name Type Description Default value Any attribute of item returned by find_all or find_by_pk required field BaseField Starlette Admin field for this attribute required action RequestAction Specify where the data will be used. Possible values are VIEW for detail page, EDIT for editing page and API for listing page and select2 data. required request Request Starlette Request required","title":"Views"},{"location":"api/views/#starlette_admin.views.BaseView","text":"Base class for all views Attributes: Name Type Description label str Label of the view to be displayed. icon Optional [ str ] Icon to be displayed for this model in the admin. Only FontAwesome names are supported.","title":"BaseView"},{"location":"api/views/#starlette_admin.views.BaseView.is_accessible","text":"Override this method to add permission checks. Return True if current user can access this view","title":"is_accessible()"},{"location":"api/views/#starlette_admin.views.BaseView.is_active","text":"Return true if the current view is active","title":"is_active()"},{"location":"api/views/#starlette_admin.views.DropDown","text":"Bases: BaseView Group views inside a dropdown Example admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) )","title":"DropDown"},{"location":"api/views/#starlette_admin.views.Link","text":"Bases: BaseView Add arbitrary hyperlinks to the menu Example admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" ))","title":"Link"},{"location":"api/views/#starlette_admin.views.CustomView","text":"Bases: BaseView Add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. Attributes: Name Type Description path Route path template_path Path to template file methods HTTP methods name Route name add_to_menu Display to menu or not Example admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" ))","title":"CustomView"},{"location":"api/views/#starlette_admin.views.CustomView.render","text":"Default methods to render view. Override this methods to add your custom logic.","title":"render()"},{"location":"api/views/#starlette_admin.views.BaseModelView","text":"Bases: BaseView Base administrative view. Derive from this class to implement your administrative interface piece. Attributes: Name Type Description identity Optional [ str ] Unique identity to identify the model associated to this view. Will be used for URL of the endpoints. name Optional [ str ] Name of the view to be displayed fields Sequence [ BaseField ] List of fields pk_attr Optional [ str ] Primary key field name form_include_pk bool Indicate if the primary key should be excluded from create and edit. Default to True exclude_fields_from_list Sequence [ str ] List of fields to exclude in List page. exclude_fields_from_detail Sequence [ str ] List of fields to exclude in Detail page. exclude_fields_from_create Sequence [ str ] List of fields to exclude from creation page. exclude_fields_from_edit Sequence [ str ] List of fields to exclude from editing page. searchable_fields Optional [ Sequence [ str ]] List of searchable fields. sortable_fields Optional [ Sequence [ str ]] List of sortable fields. export_fields Optional [ Sequence [ str ]] List of fields to include in exports. export_types Sequence [ ExportType ] A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . All of them are activated by default. column_visibility bool Control column visibility button search_builder bool Control search builder button page_size int Default number of items to display in List page pagination. Default value is set to 10 . page_size_options Sequence [ int ] Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All responsive Sequence [ int ] Activate responsive design https://datatables.net/extensions/responsive/ list_template str List view template. Default is list.html . detail_template str Details view template. Default is details.html . create_template str Edit view template. Default is edit.html . edit_template str Edit view template. Default is edit.html .","title":"BaseModelView"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_create","text":"Permission for creating new Items. Return True by default","title":"can_create()"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_delete","text":"Permission for deleting Items. Return True by default","title":"can_delete()"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_edit","text":"Permission for editing Items. Return True by default","title":"can_edit()"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_view_details","text":"Permission for viewing full details of Item. Return True by default","title":"can_view_details()"},{"location":"api/views/#starlette_admin.views.BaseModelView.count","text":"Count items Parameters: Name Type Description Default request Request Starlette Request required where Union [ Dict [ str , Any ], str , None] Can be dict for complex query { \"and\" :[{ \"id\" : { \"gt\" : 5 }},{ \"name\" : { \"startsWith\" : \"ban\" }}]} or plain text for full search None","title":"count()"},{"location":"api/views/#starlette_admin.views.BaseModelView.create","text":"Create item Parameters: Name Type Description Default request Request Starlette Request required data Dict Dict values contained converted form data required Returns: Name Type Description Any Any Created Item","title":"create()"},{"location":"api/views/#starlette_admin.views.BaseModelView.delete","text":"Bulk delete items Parameters: Name Type Description Default request Request Starlette Request required pks List [ Any ] List of primary keys required","title":"delete()"},{"location":"api/views/#starlette_admin.views.BaseModelView.edit","text":"Edit item Parameters: Name Type Description Default request Request Starlette Request required pk Any Primary key required data Dict [ str , Any ] Dict values contained converted form data required Returns: Name Type Description Any Any Edited Item","title":"edit()"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_all","text":"Find all items Parameters: Name Type Description Default request Request Starlette Request required where Union [ Dict [ str , Any ], str , None] Can be dict for complex query { \"and\" :[{ \"id\" : { \"gt\" : 5 }},{ \"name\" : { \"startsWith\" : \"ban\" }}]} or plain text for full search None skip int should return values start from position skip+1 0 limit int number of maximum items to return 100 order_by Optional [ List [ str ]] order data clauses in form [\"id asc\", \"name desc\"] None","title":"find_all()"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_by_pk","text":"Find one item Parameters: Name Type Description Default request Request Starlette Request required pk Any Primary key required","title":"find_by_pk()"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_by_pks","text":"Find many items Parameters: Name Type Description Default request Request Starlette Request required pks List [ Any ] List of Primary key required","title":"find_by_pks()"},{"location":"api/views/#starlette_admin.views.BaseModelView.repr","text":"Override this function to customize item representation in relationships columns","title":"repr()"},{"location":"api/views/#starlette_admin.views.BaseModelView.select2_result","text":"Override this function to customize the way that search results are rendered. Note The returned value should be html. You can use <span>mytext</span> when you want to return string value Danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with autoescape=True . For more information click here Parameters: Name Type Description Default obj Any item returned by find_all or find_by_pk required request Request Starlette Request required","title":"select2_result()"},{"location":"api/views/#starlette_admin.views.BaseModelView.select2_selection","text":"Override this function to customize the way that selections are rendered. Note The returned value should be html. You can use <span>mytext</span> when you want to return string value Danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with autoescape=True . For more information click here Parameters: Name Type Description Default obj Any item returned by find_all or find_by_pk required request Request Starlette Request required","title":"select2_selection()"},{"location":"api/views/#starlette_admin.views.BaseModelView.serialize_field_value","text":"Format output value for each field. Important The returned value should be json serializable Parameters: Name Type Description Default value Any attribute of item returned by find_all or find_by_pk required field BaseField Starlette Admin field for this attribute required action RequestAction Specify where the data will be used. Possible values are VIEW for detail page, EDIT for editing page and API for listing page and select2 data. required request Request Starlette Request required","title":"serialize_field_value()"},{"location":"tutorial/authentication/","text":"Authentication & Authorization By default, Starlette Admin does not enforce any authentication to your application, but provides an optional AuthProvider you can use. Authentication To enable authentication in your admin interface, inherit the AuthProvider class and set auth_provider when declaring your admin app The class AuthProvider has three methods you need to override: is_authenticated : Will be called for validating each incoming request. login : Will be called in the login page to validate username/password. logout : Will be called for the logout from starlette.requests import Request from starlette.responses import Response from starlette_admin import BaseAdmin as Admin from starlette_admin.auth import AuthProvider from starlette_admin.exceptions import FormValidationError , LoginFailed users = { \"admin\" : [ \"admin\" ], \"john\" : [ \"post:list\" , \"post:detail\" ], \"terry\" : [ \"post:list\" , \"post:create\" , \"post:edit\" ], \"doe\" : [ \"\" ], } class MyAuthProvider ( AuthProvider ): async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : if len ( username ) < 3 : raise FormValidationError ( { \"username\" : \"Ensure username has at least 03 characters\" } ) if username in users and password == \"password\" : response . set_cookie ( key = \"session\" , value = username ) return response raise LoginFailed ( \"Invalid username or password\" ) async def is_authenticated ( self , request ) -> bool : if \"session\" in request . cookies : user_roles = users . get ( request . cookies . get ( \"session\" ), None ) if user_roles is not None : \"\"\"Save user roles in request state, can be use later, to restrict user actions in admin interface\"\"\" request . state . user_roles = user_roles return True return False async def logout ( self , request : Request , response : Response ): response . delete_cookie ( \"session\" ) return response admin = Admin ( auth_provider = MyAuthProvider ()) Note Refer to demo app for full example with starlette SessionMiddleware Authorization For all views Each view implement is_accessible method which can be used to restrict access to current user. from starlette_admin import CustomView from starlette.requests import Request class ReportView ( CustomView ): def is_accessible ( self , request : Request ) -> bool : return \"admin\" in request . state . user_roles Important When view is inaccessible, it does not appear in menu structure For ModelView In ModelView , there is four additional methods you can override to restrict access to current user. can_view_details : Permission for viewing full details of Items can_create : Permission for creating new Items can_edit : Permission for editing Items can_delete : Permission for deleting Items from starlette_admin.contrib.sqla import ModelView from starlette.requests import Request class PostView ( ModelView ): def is_accessible ( self , request : Request ) -> bool : return ( \"admin\" in request . state . user_roles or \"post:list\" in request . state . user_roles ) def can_view_details ( self , request : Request ) -> bool : return \"post:detail\" in request . state . user_roles def can_create ( self , request : Request ) -> bool : return \"post:create\" in request . state . user_roles def can_edit ( self , request : Request ) -> bool : return \"post:edit\" in request . state . user_roles def can_delete ( self , request : Request ) -> bool : return \"admin\" in request . state . user_roles","title":"Authentication"},{"location":"tutorial/authentication/#authentication-authorization","text":"By default, Starlette Admin does not enforce any authentication to your application, but provides an optional AuthProvider you can use.","title":"Authentication &amp; Authorization"},{"location":"tutorial/authentication/#authentication","text":"To enable authentication in your admin interface, inherit the AuthProvider class and set auth_provider when declaring your admin app The class AuthProvider has three methods you need to override: is_authenticated : Will be called for validating each incoming request. login : Will be called in the login page to validate username/password. logout : Will be called for the logout from starlette.requests import Request from starlette.responses import Response from starlette_admin import BaseAdmin as Admin from starlette_admin.auth import AuthProvider from starlette_admin.exceptions import FormValidationError , LoginFailed users = { \"admin\" : [ \"admin\" ], \"john\" : [ \"post:list\" , \"post:detail\" ], \"terry\" : [ \"post:list\" , \"post:create\" , \"post:edit\" ], \"doe\" : [ \"\" ], } class MyAuthProvider ( AuthProvider ): async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : if len ( username ) < 3 : raise FormValidationError ( { \"username\" : \"Ensure username has at least 03 characters\" } ) if username in users and password == \"password\" : response . set_cookie ( key = \"session\" , value = username ) return response raise LoginFailed ( \"Invalid username or password\" ) async def is_authenticated ( self , request ) -> bool : if \"session\" in request . cookies : user_roles = users . get ( request . cookies . get ( \"session\" ), None ) if user_roles is not None : \"\"\"Save user roles in request state, can be use later, to restrict user actions in admin interface\"\"\" request . state . user_roles = user_roles return True return False async def logout ( self , request : Request , response : Response ): response . delete_cookie ( \"session\" ) return response admin = Admin ( auth_provider = MyAuthProvider ()) Note Refer to demo app for full example with starlette SessionMiddleware","title":"Authentication"},{"location":"tutorial/authentication/#authorization","text":"","title":"Authorization"},{"location":"tutorial/authentication/#for-all-views","text":"Each view implement is_accessible method which can be used to restrict access to current user. from starlette_admin import CustomView from starlette.requests import Request class ReportView ( CustomView ): def is_accessible ( self , request : Request ) -> bool : return \"admin\" in request . state . user_roles Important When view is inaccessible, it does not appear in menu structure","title":"For all views"},{"location":"tutorial/authentication/#for-modelview","text":"In ModelView , there is four additional methods you can override to restrict access to current user. can_view_details : Permission for viewing full details of Items can_create : Permission for creating new Items can_edit : Permission for editing Items can_delete : Permission for deleting Items from starlette_admin.contrib.sqla import ModelView from starlette.requests import Request class PostView ( ModelView ): def is_accessible ( self , request : Request ) -> bool : return ( \"admin\" in request . state . user_roles or \"post:list\" in request . state . user_roles ) def can_view_details ( self , request : Request ) -> bool : return \"post:detail\" in request . state . user_roles def can_create ( self , request : Request ) -> bool : return \"post:create\" in request . state . user_roles def can_edit ( self , request : Request ) -> bool : return \"post:edit\" in request . state . user_roles def can_delete ( self , request : Request ) -> bool : return \"admin\" in request . state . user_roles","title":"For ModelView"},{"location":"tutorial/files/","text":"Managing files Starlette-Admin has out-of-the-box support for SQLAlchemy-file and Gridfs through Mongoengine FileField & ImageField SQLAlchemy & SQLModel All you need is to add ImageField or FileField from SQLAlchemy-file to your model from sqlalchemy import Column , Integer , String from sqlalchemy.orm import declarative_base from sqlalchemy_file import FileField , ImageField from starlette_admin.contrib.sqla import ModelView Base = declarative_base () class Book ( Base ): __tablename__ = \"book\" id = Column ( Integer , autoincrement = True , primary_key = True ) title = Column ( String ( 50 ), unique = True ) cover = Column ( ImageField ( thumbnail_size = ( 128 , 128 ))) content = Column ( FileField ) class BookView ( ModelView ): pass admin . add_view ( BookView ( Book )) Note You can also use multiple=True to save multiple files. MongoEngine Starlette-Admin support ImageField and FileField from mongoengine import Document , FileField , ImageField , StringField from starlette_admin.contrib.mongoengine import ModelView class Book ( Document ): title = StringField ( max_length = 50 ) cover = ImageField ( thumbnail_size = ( 128 , 128 )) content = FileField () class BookView ( ModelView ): pass admin . add_view ( BookView ( Book ))","title":"Managing Files"},{"location":"tutorial/files/#managing-files","text":"Starlette-Admin has out-of-the-box support for SQLAlchemy-file and Gridfs through Mongoengine FileField & ImageField","title":"Managing files"},{"location":"tutorial/files/#sqlalchemy-sqlmodel","text":"All you need is to add ImageField or FileField from SQLAlchemy-file to your model from sqlalchemy import Column , Integer , String from sqlalchemy.orm import declarative_base from sqlalchemy_file import FileField , ImageField from starlette_admin.contrib.sqla import ModelView Base = declarative_base () class Book ( Base ): __tablename__ = \"book\" id = Column ( Integer , autoincrement = True , primary_key = True ) title = Column ( String ( 50 ), unique = True ) cover = Column ( ImageField ( thumbnail_size = ( 128 , 128 ))) content = Column ( FileField ) class BookView ( ModelView ): pass admin . add_view ( BookView ( Book )) Note You can also use multiple=True to save multiple files.","title":"SQLAlchemy &amp; SQLModel"},{"location":"tutorial/files/#mongoengine","text":"Starlette-Admin support ImageField and FileField from mongoengine import Document , FileField , ImageField , StringField from starlette_admin.contrib.mongoengine import ModelView class Book ( Document ): title = StringField ( max_length = 50 ) cover = ImageField ( thumbnail_size = ( 128 , 128 )) content = FileField () class BookView ( ModelView ): pass admin . add_view ( BookView ( Book ))","title":"MongoEngine"},{"location":"tutorial/getting-started/","text":"Getting started Initialization The first step is to initialize an empty admin interface for your app: SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from starlette_admin.contrib.mongoengine import Admin admin = Admin () from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin engine = AIOEngine () admin = Admin ( engine ) Adding Views ModelView Model views allow you to add a dedicated set of admin pages for managing any model. SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) This gives you a set of fully featured CRUD views for your model: A list view , with support for searching, sorting, filtering, and deleting records. A create view for adding new records. An edit view for updating existing records. A read-only details view . CustomView With CustomView you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. from starlette_admin import CustomView admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) To have a full control of the rendering, override the render methods from starlette.requests import Request from starlette.responses import Response from starlette.templating import Jinja2Templates from starlette_admin import CustomView class HomeView ( CustomView ): async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : return templates . TemplateResponse ( \"home.html\" , { \"request\" : request , \"latest_posts\" : ... , \"top_users\" : ... } ) admin . add_view ( HomeView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" )) Link Use Link to add arbitrary hyperlinks to the menu from starlette_admin.views import Link admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" )) DropDown Use DropDown to group views together in menu structure from starlette_admin import CustomView , DropDown from starlette_admin.contrib.sqla import ModelView from starlette_admin.views import Link from .models import User admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) ) Mount admin to your app The last step is to mount the admin interfaces to your app SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from starlette.applications import Starlette from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User app = Starlette () # FastAPI() admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from odmantic import AIOEngine from starlette.applications import Starlette from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) You can now access your admin interfaces in your browser at http://localhost:8000/admin","title":"Getting Started"},{"location":"tutorial/getting-started/#getting-started","text":"","title":"Getting started"},{"location":"tutorial/getting-started/#initialization","text":"The first step is to initialize an empty admin interface for your app: SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from starlette_admin.contrib.mongoengine import Admin admin = Admin () from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin engine = AIOEngine () admin = Admin ( engine )","title":"Initialization"},{"location":"tutorial/getting-started/#adding-views","text":"","title":"Adding Views"},{"location":"tutorial/getting-started/#modelview","text":"Model views allow you to add a dedicated set of admin pages for managing any model. SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) This gives you a set of fully featured CRUD views for your model: A list view , with support for searching, sorting, filtering, and deleting records. A create view for adding new records. An edit view for updating existing records. A read-only details view .","title":"ModelView"},{"location":"tutorial/getting-started/#customview","text":"With CustomView you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. from starlette_admin import CustomView admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) To have a full control of the rendering, override the render methods from starlette.requests import Request from starlette.responses import Response from starlette.templating import Jinja2Templates from starlette_admin import CustomView class HomeView ( CustomView ): async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : return templates . TemplateResponse ( \"home.html\" , { \"request\" : request , \"latest_posts\" : ... , \"top_users\" : ... } ) admin . add_view ( HomeView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" ))","title":"CustomView"},{"location":"tutorial/getting-started/#link","text":"Use Link to add arbitrary hyperlinks to the menu from starlette_admin.views import Link admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" ))","title":"Link"},{"location":"tutorial/getting-started/#dropdown","text":"Use DropDown to group views together in menu structure from starlette_admin import CustomView , DropDown from starlette_admin.contrib.sqla import ModelView from starlette_admin.views import Link from .models import User admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) )","title":"DropDown"},{"location":"tutorial/getting-started/#mount-admin-to-your-app","text":"The last step is to mount the admin interfaces to your app SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from starlette.applications import Starlette from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User app = Starlette () # FastAPI() admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from odmantic import AIOEngine from starlette.applications import Starlette from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) You can now access your admin interfaces in your browser at http://localhost:8000/admin","title":"Mount admin to your app"},{"location":"tutorial/multiple-admin/","text":"Multiple Admin You can add multiple admin to your app with different or same views. To manage this, simply use different base_url and route_name from starlette.applications import Starlette from starlette_admin import BaseAdmin as Admin from starlette_admin.contrib.sqla import ModelView app = Starlette () admin1 = Admin ( \"Admin1\" , base_url = \"/admin1\" , route_name = \"admin1\" , templates_dir = \"templates/admin1\" ) admin1 . add_view ( ModelView ( Report )) admin1 . add_view ( ModelView ( Post )) admin1 . mount_to ( app ) admin2 = Admin ( \"Admin2\" , base_url = \"/admin2\" , route_name = \"admin2\" , templates_dir = \"templates/admin2\" ) admin2 . add_view ( ModelView ( Post )) admin2 . add_view ( ModelView ( User )) admin2 . mount_to ( app ) assert app . url_path_for ( \"admin1:index\" ) == \"/admin1/\" assert app . url_path_for ( \"admin2:index\" ) == \"/admin2/\"","title":"Multiple Admin"},{"location":"tutorial/multiple-admin/#multiple-admin","text":"You can add multiple admin to your app with different or same views. To manage this, simply use different base_url and route_name from starlette.applications import Starlette from starlette_admin import BaseAdmin as Admin from starlette_admin.contrib.sqla import ModelView app = Starlette () admin1 = Admin ( \"Admin1\" , base_url = \"/admin1\" , route_name = \"admin1\" , templates_dir = \"templates/admin1\" ) admin1 . add_view ( ModelView ( Report )) admin1 . add_view ( ModelView ( Post )) admin1 . mount_to ( app ) admin2 = Admin ( \"Admin2\" , base_url = \"/admin2\" , route_name = \"admin2\" , templates_dir = \"templates/admin2\" ) admin2 . add_view ( ModelView ( Post )) admin2 . add_view ( ModelView ( User )) admin2 . mount_to ( app ) assert app . url_path_for ( \"admin1:index\" ) == \"/admin1/\" assert app . url_path_for ( \"admin2:index\" ) == \"/admin2/\"","title":"Multiple Admin"},{"location":"tutorial/validations/","text":"Forms Validations By design, Starlette-admin doesn't validate your data, the validation will depend on your database backend SQLAlchemy When working with sqlalchemy, you need to write your own validation logic to validate the data submitted in forms. Example from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class PostView ( ModelView ): async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\"Raise FormValidationError to display error in forms\"\"\" errors : Dict [ str , str ] = dict () _2day_from_today = date . today () + timedelta ( days = 2 ) if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure this value has at least 03 characters\" if data [ \"text\" ] is None or len ( data [ \"text\" ]) < 10 : errors [ \"text\" ] = \"Ensure this value has at least 10 characters\" if data [ \"date\" ] is None or data [ \"date\" ] < _2day_from_today : errors [ \"date\" ] = \"We need at least one day to verify your post\" if data [ \"publisher\" ] is None : errors [ \"publisher\" ] = \"Publisher is required\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"At least one tag is required\" if len ( errors ) > 0 : raise FormValidationError ( errors ) return await super () . validate ( request , data ) Info Full example available here SQLModel For SQLModel, you just need to define your model and submitted data are automatically validated. Example from sqlmodel import SQLModel , Field from pydantic import validator class Post ( SQLModel , table = True ): id : Optional [ int ] = Field ( primary_key = True ) title : str = Field () content : str = Field ( min_length = 10 ) views : int = Field ( multiple_of = 4 ) @validator ( 'title' ) def title_must_contain_space ( cls , v ): if ' ' not in v : raise ValueError ( 'title must contain a space' ) return v . title () Info Full example available here Odmantic The submitted data will be automatically validated according to your model definition. Example from typing import List , Optional from odmantic import EmbeddedModel , Field , Model from pydantic import EmailStr class Address ( EmbeddedModel ): street : str = Field ( min_length = 3 ) city : str = Field ( min_length = 3 ) state : Optional [ str ] zipcode : Optional [ str ] class Author ( Model ): first_name : str = Field ( min_length = 3 ) last_name : str = Field ( min_length = 3 ) email : Optional [ EmailStr ] addresses : List [ Address ] = Field ( default_factory = list ) Info Full example available here MongoEngine The submitted data will be automatically validated according to your model definition. Example import mongoengine as db class Comment ( db . EmbeddedDocument ): name = db . StringField ( min_length = 3 , max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) class Post ( db . Document ): name = db . StringField ( max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) inner = db . ListField ( db . EmbeddedDocumentField ( Comment )) lols = db . ListField ( db . StringField ( max_length = 20 )) Info Full example available here","title":"Forms Validations"},{"location":"tutorial/validations/#forms-validations","text":"By design, Starlette-admin doesn't validate your data, the validation will depend on your database backend","title":"Forms Validations"},{"location":"tutorial/validations/#sqlalchemy","text":"When working with sqlalchemy, you need to write your own validation logic to validate the data submitted in forms. Example from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class PostView ( ModelView ): async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\"Raise FormValidationError to display error in forms\"\"\" errors : Dict [ str , str ] = dict () _2day_from_today = date . today () + timedelta ( days = 2 ) if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure this value has at least 03 characters\" if data [ \"text\" ] is None or len ( data [ \"text\" ]) < 10 : errors [ \"text\" ] = \"Ensure this value has at least 10 characters\" if data [ \"date\" ] is None or data [ \"date\" ] < _2day_from_today : errors [ \"date\" ] = \"We need at least one day to verify your post\" if data [ \"publisher\" ] is None : errors [ \"publisher\" ] = \"Publisher is required\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"At least one tag is required\" if len ( errors ) > 0 : raise FormValidationError ( errors ) return await super () . validate ( request , data ) Info Full example available here","title":"SQLAlchemy"},{"location":"tutorial/validations/#sqlmodel","text":"For SQLModel, you just need to define your model and submitted data are automatically validated. Example from sqlmodel import SQLModel , Field from pydantic import validator class Post ( SQLModel , table = True ): id : Optional [ int ] = Field ( primary_key = True ) title : str = Field () content : str = Field ( min_length = 10 ) views : int = Field ( multiple_of = 4 ) @validator ( 'title' ) def title_must_contain_space ( cls , v ): if ' ' not in v : raise ValueError ( 'title must contain a space' ) return v . title () Info Full example available here","title":"SQLModel"},{"location":"tutorial/validations/#odmantic","text":"The submitted data will be automatically validated according to your model definition. Example from typing import List , Optional from odmantic import EmbeddedModel , Field , Model from pydantic import EmailStr class Address ( EmbeddedModel ): street : str = Field ( min_length = 3 ) city : str = Field ( min_length = 3 ) state : Optional [ str ] zipcode : Optional [ str ] class Author ( Model ): first_name : str = Field ( min_length = 3 ) last_name : str = Field ( min_length = 3 ) email : Optional [ EmailStr ] addresses : List [ Address ] = Field ( default_factory = list ) Info Full example available here","title":"Odmantic"},{"location":"tutorial/validations/#mongoengine","text":"The submitted data will be automatically validated according to your model definition. Example import mongoengine as db class Comment ( db . EmbeddedDocument ): name = db . StringField ( min_length = 3 , max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) class Post ( db . Document ): name = db . StringField ( max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) inner = db . ListField ( db . EmbeddedDocumentField ( Comment )) lols = db . ListField ( db . StringField ( max_length = 20 )) Info Full example available here","title":"MongoEngine"},{"location":"tutorial/configurations/admin/","text":"Admin Configurations Multiple options are available to customize your admin interface admin = Admin ( title = \"SQLModel Admin\" , base_url = \"/admin\" , route_name = \"admin\" , statics_dir = \"statics/admin\" , templates_dir = \"templates/admin\" , logo_url = \"`https`://preview.tabler.io/static/logo-white.svg\" , login_logo_url = \"`https`://preview.tabler.io/static/logo.svg\" , index_view = CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" ), auth_provider = MyAuthProvider ( login_path = \"/sign-in\" , logout_path = \"/sign-out\" ), middlewares = [], debug = False , ) Parameters title : Admin title. base_url : Base URL for Admin interface. route_name : Mounted Admin name logo_url : URL of logo to be displayed instead of title. login_logo_url : If set, it will be used for login interface instead of logo_url. statics_dir : Templates dir for static files customisation templates_dir : Templates dir for customisation index_view : CustomView to use for index page. auth_provider : Authentication Provider middlewares : Starlette middlewares","title":"Admin"},{"location":"tutorial/configurations/admin/#admin-configurations","text":"Multiple options are available to customize your admin interface admin = Admin ( title = \"SQLModel Admin\" , base_url = \"/admin\" , route_name = \"admin\" , statics_dir = \"statics/admin\" , templates_dir = \"templates/admin\" , logo_url = \"`https`://preview.tabler.io/static/logo-white.svg\" , login_logo_url = \"`https`://preview.tabler.io/static/logo.svg\" , index_view = CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" ), auth_provider = MyAuthProvider ( login_path = \"/sign-in\" , logout_path = \"/sign-out\" ), middlewares = [], debug = False , )","title":"Admin Configurations"},{"location":"tutorial/configurations/admin/#parameters","text":"title : Admin title. base_url : Base URL for Admin interface. route_name : Mounted Admin name logo_url : URL of logo to be displayed instead of title. login_logo_url : If set, it will be used for login interface instead of logo_url. statics_dir : Templates dir for static files customisation templates_dir : Templates dir for customisation index_view : CustomView to use for index page. auth_provider : Authentication Provider middlewares : Starlette middlewares","title":"Parameters"},{"location":"tutorial/configurations/modelview/","text":"ModelView Configurations Multiple options are available to customize your ModelView. For a complete list, have a look at the API documentation for BaseModelView() . Here are some of the most commonly used options: Fields Use fields property to customize which fields to include in admin view. from sqlalchemy import JSON , Column , Integer , String , Text , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin import TagsField from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) tags = Column ( JSON ) content = Column ( Text ) class PostView ( ModelView ): fields = [ \"id\" , \"title\" , Post . content , TagsField ( \"tags\" , label = \"Tags\" )] app = Starlette () admin = Admin ( engine ) admin . add_view ( PostView ( Post , icon = \"fa fa-blog\" )) admin . mount_to ( app ) Exclusions There are several options to help you exclude some fields from certain part of admin interface. The options are: exclude_fields_from_list : List of fields to exclude in List page. exclude_fields_from_detail : List of fields to exclude in Detail page. exclude_fields_from_create : List of fields to exclude from creation page. exclude_fields_from_edit : List of fields to exclude from editing page. class PostView ( ModelView ): exclude_fields_from_list = [ Post . content , Post . tags ] Searching & Sorting Two options are available to specify which fields can be sorted or searched. searchable_fields for list of searchable fields sortable_fields for list of orderable fields Usage class PostView ( ModelView ): sortable_fields = [ Post . id , \"title\" ] searchable_fields = [ Post . id , Post . title , \"tags\" ] Exporting You can export your data from list page. The export options can be set per model and includes the following options: export_fields : List of fields to include in exports. export_types : A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . By default, All of them are activated by default. Example from starlette_admin import ExportType class PostView ( ModelView ): export_fields = [ Post . id , Post . content , Post . tags ] export_types = [ ExportType . CSV , ExportType . EXCEL ] Pagination The pagination options in the list page can be configured. The available options are: page_size : Default number of items to display in List page pagination. Default value is set to 10 . page_size_options : Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All Example class PostView ( ModelView ): page_size = 5 page_size_options = [ 5 , 10 , 25 , 50 , - 1 ] Templates The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are: list_template : List view template. Default is list.html . detail_template : Details view template. Default is detail.html . create_template : Edit view template. Default is create.html . edit_template : Edit view template. Default is edit.html . Example class PostView ( ModelView ): detail_template = \"post_detail.html\"","title":"ModelView"},{"location":"tutorial/configurations/modelview/#modelview-configurations","text":"Multiple options are available to customize your ModelView. For a complete list, have a look at the API documentation for BaseModelView() . Here are some of the most commonly used options:","title":"ModelView Configurations"},{"location":"tutorial/configurations/modelview/#fields","text":"Use fields property to customize which fields to include in admin view. from sqlalchemy import JSON , Column , Integer , String , Text , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin import TagsField from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) tags = Column ( JSON ) content = Column ( Text ) class PostView ( ModelView ): fields = [ \"id\" , \"title\" , Post . content , TagsField ( \"tags\" , label = \"Tags\" )] app = Starlette () admin = Admin ( engine ) admin . add_view ( PostView ( Post , icon = \"fa fa-blog\" )) admin . mount_to ( app )","title":"Fields"},{"location":"tutorial/configurations/modelview/#exclusions","text":"There are several options to help you exclude some fields from certain part of admin interface. The options are: exclude_fields_from_list : List of fields to exclude in List page. exclude_fields_from_detail : List of fields to exclude in Detail page. exclude_fields_from_create : List of fields to exclude from creation page. exclude_fields_from_edit : List of fields to exclude from editing page. class PostView ( ModelView ): exclude_fields_from_list = [ Post . content , Post . tags ]","title":"Exclusions"},{"location":"tutorial/configurations/modelview/#searching-sorting","text":"Two options are available to specify which fields can be sorted or searched. searchable_fields for list of searchable fields sortable_fields for list of orderable fields Usage class PostView ( ModelView ): sortable_fields = [ Post . id , \"title\" ] searchable_fields = [ Post . id , Post . title , \"tags\" ]","title":"Searching &amp; Sorting"},{"location":"tutorial/configurations/modelview/#exporting","text":"You can export your data from list page. The export options can be set per model and includes the following options: export_fields : List of fields to include in exports. export_types : A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . By default, All of them are activated by default. Example from starlette_admin import ExportType class PostView ( ModelView ): export_fields = [ Post . id , Post . content , Post . tags ] export_types = [ ExportType . CSV , ExportType . EXCEL ]","title":"Exporting"},{"location":"tutorial/configurations/modelview/#pagination","text":"The pagination options in the list page can be configured. The available options are: page_size : Default number of items to display in List page pagination. Default value is set to 10 . page_size_options : Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All Example class PostView ( ModelView ): page_size = 5 page_size_options = [ 5 , 10 , 25 , 50 , - 1 ]","title":"Pagination"},{"location":"tutorial/configurations/modelview/#templates","text":"The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are: list_template : List view template. Default is list.html . detail_template : Details view template. Default is detail.html . create_template : Edit view template. Default is create.html . edit_template : Edit view template. Default is edit.html . Example class PostView ( ModelView ): detail_template = \"post_detail.html\"","title":"Templates"}]}